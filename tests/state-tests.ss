(library (state-tests)
  (export run-state-tests)
  (import (chezscheme) (test-runner) (state) (datatypes))
  
  (define (run-state-tests)
    (define x0 (make-var 0))
    (define x2 (make-var 2))
    (tassert "state walk ground" (walk empty-state 2) 2)
    (tassert "state walk free" (walk empty-state x0) x0)
    (tassert "state reify ground" (reify empty-state 2) 2)
    (tassert "state reify free" (reify empty-state x0) x0)
        (display "FLAG\n\n")
	(tassert "state reify bound" (reify (unify empty-state x0 0) x0) 0)
	(exit)
    (tassert "state reify pair" (reify (unify empty-state x0 0) (cons 2 (cons x0 x2))) (cons 2 (cons 0 x2)))
    (tassert "state unify ground-ground" (unify empty-state 2 2) empty-state)
    (tassert "state unify free-ground" (walk (unify empty-state x0 2) x0) 2)
    (tassert "state unify free-ground" (walk (unify empty-state 2 x0) x0) 2)
    (tassert "state unify variable to itself" (unify empty-state x0 x0) empty-state)
    (tassert "state unify free-free" (walk (unify empty-state x0 x2) x0) x2)
    (tassert "state unify free-free inverse priority" (walk (unify empty-state x2 x0) x0) x2)
    (tassert "state unify cars" (walk (unify empty-state (cons x0 0) (cons 2 0)) x0) 2)
    (tassert "state unify cars fail" (unify empty-state (cons 0 x0) (cons 2 0)) failure)
    (tassert "state unify cdrs" (walk (unify empty-state (cons 0 x0) (cons 0 2)) x0) 2)
    (tassert "state unify cdrs fail" (unify empty-state (cons x0 2) (cons 2 0)) failure)))
