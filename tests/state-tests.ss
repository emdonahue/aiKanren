(library (state-tests)
  (export run-state-tests)
  (import (chezscheme) (state) (var) (test-runner) (failure))

  (define (run-state-tests)
    (define x0 (make-var 0))
    (define x1 (make-var 1))
    (tassert "state walk ground" (walk empty-state 1) 1)
    (tassert "state walk free" (walk empty-state x0) x0)
    (tassert "state reify ground" (reify empty-state 1) 1)
    (tassert "state reify free" (reify empty-state x0) x0)
    (tassert "state reify bound" (reify (unify empty-state x0 0) x0) 0)
    (tassert "state reify pair" (reify (unify empty-state x0 0) (cons 1 (cons x0 x1))) (cons 1 (cons 0 x1)))
    (tassert "unify ground-ground" (unify empty-state 1 1) empty-state)
    (tassert "unify free-ground" (walk (unify empty-state x0 1) x0) 1)
    (tassert "unify free-ground" (walk (unify empty-state 1 x0) x0) 1)
    (tassert "unify variable to itself" (unify empty-state x0 x0) empty-state)
    (tassert "unify free-free" (walk (unify empty-state x0 x1) x0) x1)
    (tassert "unify free-free inverse priority" (walk (unify empty-state x1 x0) x0) x1)
    (tassert "unify cars" (walk (unify empty-state (cons x0 0) (cons 1 0)) x0) 1)
    (tassert "unify cars fail" (unify empty-state (cons 0 x0) (cons 1 0)) failure)
    (tassert "unify cdrs" (walk (unify empty-state (cons 0 x0) (cons 0 1)) x0) 1)
    (tassert "unify cdrs fail" (unify empty-state (cons x0 1) (cons 1 0)) failure)))
