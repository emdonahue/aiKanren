(library (constraints-tests)
  (export run-constraints-tests)
  (import (chezscheme) (ui) (test-runner) (datatypes))

  (define (run-constraints-tests)
    (define x1 (make-var 1))
    (define x2 (make-var 2))
    
    (tassert "disunify ground-self" (run* (q) (=/= 2 2)) '())
    (tassert "disunify ground-different" (run* () (=/= 1 2)) '(()))
    (tassert "disunify free-self" (run* (x1) (=/= x1 x1)) '())
    (tassert "disunify free-ground" (run1 (x1) (=/= x1 1)) (=/= x1 1))
    (tassert "disunify ground-free" (run1 (x1) (=/= 1 x1)) (=/= x1 1))
    (tassert "disunify free-free" (run1 (x1 x2) (=/= x1 x2))
	     (list (=/= x1 x2) (=/= x1 x2)))
    (tassert "disunify bound" (run* (x1) (== x1 1) (=/= x1 1)) '())
    (tassert "disunify check" (run* (x1) (=/= x1 1) (== x1 1)) '())
    (tassert "disunify free-ground x2" (run1 (x1) (=/= x1 2) (=/= x1 1))
	     (conj* (=/= x1 1) (=/= x1 2)))
    (tassert "disunify transfer to free then check" (run* (x1 x2) (=/= x1 2) (== x1 x2) (== x2 2)) '())
    (tassert "disunify lists" (car (run1 (x1 x2) (=/= (cons x1 x2) (cons 1 2))))
	     (disj* (=/= x1 1) (=/= x2 2)))    
    (tassert "disunify fire lists" (run1 (x1 x2) (=/= (cons x1 x2) (cons 1 2)) (== x1 1))
	     (list 1 (=/= x2 2)))
    (tassert "disunify fire lists and fail" (run* (x1 x2) (=/= (cons x1 x2) (cons 1 2)) (== x1 1) (== x2 2))
	     '())
    (tassert "disunify simultaneous list diseq" (run* (x1 x2) (=/= (cons x1 x2) (cons 1 2)) (== (cons x1 x2) (cons 1 2)))
	     '())
    (tassert "disunify simultaneous list diseq, fail on first" (run* (x1 x2) (=/= x1 1) (== (cons x1 x2) (cons 1 2)))
	     '())
    (tassert "disunify simultaneous list diseq, fail on second" (run* (x1 x2) (=/= x2 2) (== (cons x1 x2) (cons 1 2)))
	     '())

    (tassert "==-c ground-self" (run1 (x1) (make-constraint (== 1 1))) x1)
    (tassert "==-c ground-different" (run1 (x1) (make-constraint (== 1 2))) (void))
    (tassert "==-c free-ground" (run1 (x1) (make-constraint (== x1 1))) 1)
    (tassert "==-c bound-ground-same" (run1 (x1) (== x1 1) (make-constraint (== x1 1))) 1)
    (tassert "==-c bound-ground-different" (run1 (x1) (== x1 2) (make-constraint (== x1 1))) (void))
    (tassert "==-c ground-bound-same" (run1 (x1) (make-constraint (== x1 1)) (== x1 1)) 1)
    (tassert "==-c ground-bound-different" (run1 (x1) (make-constraint (== x1 1)) (== x1 2)) (void))
    (tassert "==-c x ==-c conflict" (run1 (x1) (make-constraint (== x1 1)) (make-constraint (== x1 2))) (void))
    (tassert "==-c x ==-c no conflict" (run1 (x1) (make-constraint (== x1 1)) (make-constraint (== x1 1))) 1)
    (tassert "==-c & ==-c conflict" (run1 (x1) (make-constraint (conj* (== x1 2) (== x1 1)))) (void))
    (tassert "==-c & ==-c no conflict" (run1 (x1) (make-constraint (conj* (== x1 1) (== x1 1)))) 1)
    (tassert "==-c x =/=-c conflict" (run1 (x1) (=/= x1 1) (make-constraint (== x1 1))) (void))
    (tassert "==-c x =/=-c no conflict" (run1 (x1) (=/= x1 2) (make-constraint (== x1 1))) 1)
    (tassert "==-c | ==-c" (run1 (x1) (make-constraint (disj* (== x1 1) (== x1 2)))) (disj* (== x1 1) (== x1 2)))
    (tassert "==-c | ==-c attributes" (run1 (x1 x2) (make-constraint (disj* (== x1 1) (== x2 2)))) (list (disj* (== x1 1) (== x2 2)) x2))
    (tassert "==-c | ==-c simplifies bound"
	     (run1 (x1 x2) (== x1 1) (make-constraint (disj* (== x1 1) (== x2 2)))) (list 1 x2))
    (tassert "==-c | ==-c transfers bound"
	     (run1 (x1 x2) (== x1 3) (make-constraint (disj* (== x1 1) (== x2 2)))) (list 3 2))

    (tassert "booleano bound t" (run1 (x1) (== x1 #t) (disj* (== x1 #t) (== x1 #f))) #t)
    (tassert "booleano bound f" (run1 (x1) (== x1 #f) (disj* (== x1 #t) (== x1 #f))) #f)
    (tassert "booleano bound undecidable fail" (run1 (x1) (== x1 'undecidable) (disj* (== x1 #t) (== x1 #f))) (void))
    (tassert "booleano fired t" (run1 (x1) (disj* (== x1 #t) (== x1 #f)) (== x1 #t)) #t)
    (tassert "booleano fired f" (run1 (x1) (disj* (== x1 #t) (== x1 #f)) (== x1 #f)) #f)
    (tassert "booleano fired undecidable fail" (run1 (x1) (disj* (== x1 #t) (== x1 #f)) (== x1 'undecidable)) (void))

    (tassert "conj fail first" (normalized-conj* fail succeed) fail)
    (tassert "conj fail rest" (normalized-conj* succeed fail) fail)
    (tassert "conj compress succeed" (normalized-conj* succeed succeed) succeed)
    (tassert "conj single goals" (normalized-conj* (== 1 1)) (== 1 1))
    (tassert "conj keep normal goals" (normalized-conj* (== 1 1) succeed (== 1 1)) (conj* (== 1 1) (== 1 1)))
    (tassert "conj append conjs" (normalized-conj* (conj* (== 1 1) (== 2 2)) (conj* (== 3 3) (== 4 4))) (conj* (== 1 1) (== 2 2) (== 3 3) (== 4 4)))

    (tassert "disj succeed first" (normalized-disj* succeed fail) succeed)
    (tassert "disj succeed rest" (normalized-disj* fail succeed) succeed)
    (tassert "disj compress fail" (normalized-disj* fail fail) fail)
    (tassert "disj single goals" (normalized-disj* (== 1 1)) (== 1 1))
    (tassert "disj keep normal goals" (normalized-disj* (== 1 1) fail (== 1 1)) (disj* (== 1 1) (== 1 1)))
    (tassert "disj append disjs" (normalized-disj* (disj* (== 1 1) (== 2 2)) (disj* (== 3 3) (== 4 4))) (disj* (== 1 1) (== 2 2) (== 3 3) (== 4 4)))

    (tassert "cnf primitive" (conjunctive-normal-form (== 1 1)) (== 1 1))
    (tassert "cnf simple conj" (conjunctive-normal-form (conj* (== 1 1) (== 2 2))) (conj* (== 1 1) (== 2 2)))
    (tassert "cnf nested conj"
	     (conjunctive-normal-form
	      (conj* (conj* (== 1 1) (== 2 2)) (conj* (== 3 3) (== 4 4)))) (conj* (== 1 1) (== 2 2) (== 3 3) (== 4 4)))
    
    ;(display (runner-step (runner (q) (make-constraint (disj* (== q 1) (== q 2))))))
    ;(display (runner-step (runner (q) (make-constraint (== q 1)))))
    ;(display (runner-step (runner (q r) (make-constraint (conj* (== q 1) (== r 2))))))
    
    ))
