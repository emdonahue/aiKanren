(library (aggressive-solver-tests) ; Tests the higher level constraint solving beyond detecting failure (eg resolving inevitable unifications to single ground terms)
  (export run-aggressive-solver-tests)
  (import (chezscheme) (test-runner) (mk) (utils) (state) (solver))
  
  (define (run-aggressive-solver-tests)
    (tassert "disj factors ==s already in store" (run1 (x1 x2) (disj (== x1 1) (== x2 2)) (disj (== x1 1) (=/= x2 2))) (list 1 (proxy x1)))
    (tassert "disequalities attribute only to first var" (run1 (x1 x2) (=/= (cons x1 x2) '(1 . 2))) (list (disj (=/= x1 1) (=/= x2 2)) x2))
    (tassert "attribute to negation if second and promote" (run1 (x1) (disj (== x1 1) (=/= x1 1))) (disj (=/= x1 1) (== x1 1)))
    (tassert "attribute x1=>x2, ~x2=>x1" (run1 (x1 x2) (disj (== x1 1) (conj (== x1 1) (== x2 2)))) (list 1 x2))
    (tassert "attribute ~x1=>x2, ~x2=>x1" (run1 (x1 x2) (disj (== x1 1) (== x2 2)))
             (list (disj (== x1 1) (== x2 2)) (proxy x1)))
    (tassert "attribute x1=>x2, ~x2=>x1" (run1 (x1 x2) (disj (== x1 1) (conj (== x1 1) (== x2 2)))) (list (disj (== x1 1) (conj (== x1 1) (== x2 2))) (proxy x1)))
    (tassert "attribute x1=>x2, x2=>x1" (run1 (x1 x2 x3) (disj (conj (== x1 1) (== x2 2)) (== x3 3)))
             (list (disj (conj (== x1 1) (== x2 2)) (== x3 3))
                   (proxy x1)
                   (proxy x1)))
    (tassert "attribute == =/=" (run1 (x1 x2) (disj (== x1 1) (=/= x2 2)))
             (list (disj (== x1 1) (=/= x2 2)) (proxy x1)))
    (tassert "attribute x1:x1=1=>x2=2, x3:x3~3=>x2=2, x2:x2~2=>x3=3" (run1 (x1 x2 x3) (disj (conj (=/= x1 1) (== x3 3)) (== x2 2)))
             (list (disj (conj (=/= x1 1) (== x3 3)) (== x2 2))
                   (proxy x1)
                   (proxy x1)))
    (tassert "constraint == ==|succeed" (run1 (x1 x2) (constraint (== x1 1)) (constraint (conde ((== x2 2)) ((== x1 1))))) (list 1 x2))
    (tassert "constraint == ==|==|=="
              (run1 (x1 x2 x3) (constraint (== x3 1))
                    (constraint (conde ((== x1 x3)) ((== x2 x3)) ((== x1 x3)))))
              (list (disj (disj (== x1 1) (== x2 1)) (== x1 1)) (proxy x1) 1))
    (tassert "constraint simplification lvl 2" (run1 (x1 x2 x3 x4) (constraint (== x4 1)) (constraint (conde ((== x1 x4)) ((== x2 x4)) ((== x3 x4)))))
             (list (disj (disj (== x1 1) (== x2 1)) (== x3 1)) (proxy x1) x3 1))
    (tassert "disunify simplify disjunction fails first" (run1 (x1 x2) (disj (== x2 2) (== x1 1)) (=/= x1 1)) (list (=/= x1 1) 2))
    (tassert "==-c | ==-c attributes" (run1 (x1 x2) (constraint (disj* (== x1 1) (== x2 2)))) (list (disj (== x1 1) (== x2 2)) (proxy x1)))
    (tassert "== factored out of disj" (run1 (x1) (disj (== x1 1) (== x1 1))) 1) ;TODO consider adding back in common factor extraction to disjunction
    (tassert "== factored out of nested disj" (run1 (x1 x2) (== x2 2) (disj (conj (== x2 2) (disj (== x1 1) (== x1 1))) (== x2 3))) '(1 2))
    (tassert "noto does not negate rechecked constraints" (run1 (x1 x2) (disj (== x1 1) (== x2 2)) (noto (symbolo x1))) (list (conj (disj (== x1 1) (== x2 2)) (noto (symbolo x1))) (proxy x1)))
    ))
